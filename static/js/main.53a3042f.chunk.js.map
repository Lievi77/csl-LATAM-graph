{"version":3,"sources":["CasosLATAM.jsx","App.js","serviceWorker.js","index.js"],"names":["CasosLATAM","this","drawChart","dataPath","props","data","width","height","svg","d3","append","attr","adj","style","classed","dateFormatter","then","novaData","i","length","push","date","dateRep","confirmed","cases","xScale","range","yScale","rangeRound","domain","d","ticks","yaxis","scale","xaxis","tickFormat","call","selectAll","covidLine","x","y","text","id","React","Component","LATAMDim","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53a3042f.chunk.js","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport \"./CasosLATAM.css\";\n\nclass CasosLATAM extends React.Component {\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  drawChart() {\n    //data path, width and height provided in App.js for reusability\n    const dataPath = this.props.data;\n    const width = this.props.width;\n    const height = this.props.height;\n    //the rest of the svg parameters will be provided in this class\n    const adj = 60;\n    const padding = 5;\n    const margin = 5;\n\n    const up_translation = -150;\n\n    //canvas definition here\n\n    const svg = d3\n      .select(\"body\") //selects an html tag to be appended to\n      .append(\"svg\")\n      .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n      .attr(\n        \"viewBox\",\n        \"-\" +\n          adj +\n          \" -\" +\n          adj +\n          \" \" +\n          (width + adj * 3) +\n          \" \" +\n          (height + adj * 3)\n      )\n      .attr(\"transform\", \"translate(\" + 0 + \", \" + up_translation + \")\")\n      .style(\"padding\", padding)\n      .style(\"margin\", margin)\n      .classed(\"svg-content\", true);\n\n    //Here we add the background\n\n    const background_rotation = -10;\n\n    svg\n      .append(\"rect\")\n      .attr(\"width\", width + 65)\n      .attr(\"height\", height + 70)\n      .attr(\"fill\", \"white\")\n      .attr(\"transform\", \"translate(\" + background_rotation + \", 0)\");\n\n    //DATA LOADING\n    const dateFormatter = d3.timeParse(\"%Y-%m-%d\"); //to be used to transform strings to date objects\n\n    //we will use chained .then method calls\n    //first .then call will be used to format the csv file\n    //second one will be to actually build the graph\n    d3.csv(dataPath)\n      .then(function (data) {\n        //format the csv file to mapped values {date, confirmed}\n\n        const novaData = []; //new array of objects\n\n        for (var i = 0; i < data.length; i++) {\n          novaData.push({\n            date: dateFormatter(data[i].dateRep),\n            confirmed: +data[i].cases,\n          });\n        }\n\n        return novaData; //return for usage in the next .then call\n      })\n      .then(function (data) {\n        //drawing the graph here\n\n        //first we wil define the axes scale\n        const xScale = d3.scaleTime().range([0, width]);\n        const yScale = d3.scaleLinear().rangeRound([height, 0]);\n\n        //next we will set the domain for the scales\n        //xScale Domain\n        xScale.domain(\n          d3.extent(data, function (d) {\n            return d.date; // data is already formatted\n          })\n        );\n        //yScale next\n        yScale.domain([\n          0,\n          d3.max(data, function (d) {\n            return d.confirmed; //data is also formatted\n          }),\n        ]);\n\n        //we define pretty ticks here\n        xScale.ticks();\n        yScale.ticks();\n\n        //now we will draw the actual Axes here\n\n        //may need to investigate better axes\n        const yaxis = d3.axisLeft().scale(yScale);\n        const xaxis = d3\n          .axisBottom()\n          .tickFormat(d3.timeFormat(\"%d-%b-%Y\")) //need for cleaner data\n          .scale(xScale);\n\n        var right_rotation = 50;\n\n        //appending to the svg the axis and the line\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"axis\")\n          .attr(\"transform\", \"translate(\" + right_rotation + \",\" + height + \")\")\n          .call(xaxis)\n          .selectAll(\"text\") //from here on we are selecting the ticks text\n          .attr(\"transform\", \"translate(-10,10)rotate(-45)\")\n          .style(\"text-anchor\", \"end\")\n          .style(\"font-size\", 8)\n          .style(\"fill\", \"#000000\");\n\n        svg\n          .append(\"g\")\n          .attr(\"class\", \"axis\")\n          .attr(\"transform\", \"translate(\" + right_rotation + \", 0)\")\n          .call(yaxis);\n\n        //defining the line\n        const covidLine = d3\n          .line()\n          .x(function (d) {\n            return xScale(d.date);\n          })\n          .y(function (d) {\n            return yScale(d.confirmed);\n          });\n\n        //appending the line to the svg with added interactivity\n        svg\n          .append(\"path\")\n          .data([data])\n          .attr(\"class\", \"line\")\n          .attr(\"transform\", \"translate(\" + right_rotation + \",\" + 0 + \")\")\n          .attr(\"d\", covidLine);\n        //From here on, we are defining the mouseover effect\n\n        //appending the axis titles\n        svg\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\n            \"transform\",\n            \"translate(\" + 0 + \",\" + height / 2 + \")rotate(-90)\"\n          )\n          .text(\"Casos Confirmados\")\n          .style(\"font-size\", 12)\n          .style(\"fill\", \"Grey \");\n\n        svg\n          .append(\"text\")\n          .attr(\"text-anchor\", \"middle\") // this makes it easy to centre the text as the transform is applied to the anchor\n          .attr(\n            \"transform\",\n            \"translate(\" + (width + 40) / 2 + \",\" + (height + 69) + \")\"\n          ) // centre below axis\n          .text(\"Fecha\")\n          .style(\"font-size\", 12)\n          .style(\"fill\", \"Grey\");\n      });\n  }\n\n  render() {\n    //render must be in html\n    return <div id={\"#\" + this.props.id}></div>;\n  }\n}\n\nexport default CasosLATAM;\n","import React from \"react\";\nimport CasosLATAM from \"./CasosLATAM.jsx\"; // import the actual graph\nimport \"./App.css\";\n\nconst LATAMDim = {\n  width: 425,\n  height: 200,\n  data: \"https://github.com/Lievi77/covid-data/blob/master/Condensed.csv\",\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>\n          Casos Confirmados por Dia de Coronavirus en Latinoamerica (LATAM)\n        </h1>\n        <body>\n          <CasosLATAM\n            width={LATAMDim.width}\n            height={LATAMDim.height}\n            data={LATAMDim.data}\n          />\n        </body>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}